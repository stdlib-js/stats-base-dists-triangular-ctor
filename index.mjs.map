{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-triangular-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-triangular-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-triangular-mean' );\nvar median = require( '@stdlib/stats-base-dists-triangular-median' );\nvar mode = require( '@stdlib/stats-base-dists-triangular-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-triangular-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-triangular-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-triangular-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-triangular-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-triangular-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-triangular-logpdf' );\nvar mgf = require( '@stdlib/stats-base-dists-triangular-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-triangular-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-triangular-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction triangularCDF( x ) {\n\treturn cdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction triangularLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction triangularLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction triangularMGF( t ) {\n\treturn mgf( t, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction triangularPDF( x ) {\n\treturn pdf( x, this.a, this.b, this.c );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction triangularQuantile( p ) {\n\treturn quantile( p, this.a, this.b, this.c );\n}\n\n\n// MAIN //\n\n/**\n* Triangular distribution constructor.\n*\n* @constructor\n* @param {number} [a=0.0] - minimum support\n* @param {number} [b=1.0] - maximum support\n* @param {number} [c=0.5] - mode\n* @throws {TypeError} `a` must be a number\n* @throws {TypeError} `b` must be a number\n* @throws {TypeError} `c` must be a number\n* @throws {RangeError} `a` must be less than or equal to `b` and `c`\n* @throws {RangeError} `b` must be greater than or equal to `a` and `b`\n* @throws {RangeError} `c` must be greater than or equal to `a` and smaller than or equal to `b`\n* @returns {Triangular} distribution instance\n*\n* @example\n* var triangular = new Triangular( 0.0, 1.0, 0.25 );\n*\n* var y = triangular.cdf( 0.8 );\n* // returns ~0.947\n*\n* var mu = triangular.mean;\n* // returns ~0.417\n*/\nfunction Triangular() {\n\tvar a;\n\tvar b;\n\tvar c;\n\tif ( !(this instanceof Triangular) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Triangular();\n\t\t}\n\t\treturn new Triangular( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tc = arguments[ 2 ];\n\t\tif ( !isNumber( a ) || isnan( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Minimum support `a` must be a number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Maximum support `b` must be a number. Value: `%s`.', b ) );\n\t\t}\n\t\tif ( !isNumber( c ) || isnan( c ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mode `c` must be a number. Value: `%s`.', c ) );\n\t\t}\n\t\tif ( !( a <= c && c <= b ) ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Parameters must satisfy `a <= c <= b`. `a: %f, b: %f, c: %f`.', a, b, c ) );\n\t\t}\n\t} else {\n\t\ta = 0.0;\n\t\tb = 1.0;\n\t\tc = 0.5;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( value > b || value > c ) {\n\t\t\t\tthrow new RangeError( format( 'invalid value. Must be less than or equal to `b` and `c`. Value: `%f`.', value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( a > value || c > value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid value. Must be greater than or equal to `a` and `c`. Value: `%f`.', value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'c', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn c;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tif ( a > value || b < value ) {\n\t\t\t\tthrow new RangeError( format( 'invalid value. Must be greater than or equal to `a` and smaller than or equal to `b`. Value: `%f`.', value ) );\n\t\t\t}\n\t\t\tc = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Triangular distribution differential entropy.\n*\n* @name entropy\n* @memberof Triangular.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.entropy;\n* // returns ~1.886\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'entropy', function get() {\n\treturn entropy( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Triangular.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.kurtosis;\n* // returns -0.6\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution expected value.\n*\n* @name mean\n* @memberof Triangular.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.mean;\n* // returns ~8.667\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution median.\n*\n* @name median\n* @memberof Triangular.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.median;\n* // returns ~8.899\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'median', function get() {\n\treturn median( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution mode.\n*\n* @name mode\n* @memberof Triangular.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.mode;\n* // returns 10.0\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution skewness.\n*\n* @name skewness\n* @memberof Triangular.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.skewness;\n* // returns ~-0.422\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution standard deviation.\n*\n* @name stdev\n* @memberof Triangular.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.stdev;\n* // returns ~1.7\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b, this.c );\n});\n\n/**\n* Triangular distribution variance.\n*\n* @name variance\n* @memberof Triangular.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var triangular = new Triangular( 4.0, 12.0, 10.0 );\n*\n* var v = triangular.variance;\n* // returns ~2.889\n*/\nsetReadOnlyAccessor( Triangular.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b, this.c );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.cdf( 3.0 );\n* // returns 0.5\n*/\nsetReadOnly( Triangular.prototype, 'cdf', triangularCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.logcdf( 3.0 );\n* // returns ~-0.693\n*/\nsetReadOnly( Triangular.prototype, 'logcdf', triangularLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.logpdf( 2.4 );\n* // returns ~-0.916\n*/\nsetReadOnly( Triangular.prototype, 'logpdf', triangularLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.mgf( 0.5 );\n* // returns ~4.576\n*/\nsetReadOnly( Triangular.prototype, 'mgf', triangularMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.pdf( 2.4 );\n* // returns ~0.40\n*/\nsetReadOnly( Triangular.prototype, 'pdf', triangularPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Triangular.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var triangular = new Triangular( 2.0, 4.0, 3.0 );\n*\n* var v = triangular.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Triangular.prototype, 'quantile', triangularQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Triangular;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution constructor.\n*\n* @module @stdlib/stats-base-dists-triangular-ctor\n*\n* @example\n* var Triangular = require( '@stdlib/stats-base-dists-triangular-ctor' );\n*\n* var triangular = new Triangular( 0.0, 1.0, 0.5 );\n*\n* var y = triangular.cdf( 0.8 );\n* // returns 0.92\n*\n* var mu = triangular.mean;\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["defineProperty","require$$0","setReadOnly","require$$1","setReadOnlyAccessor","require$$2","isNumber","require$$3","isPrimitive","isnan","require$$4","entropy","require$$5","kurtosis","require$$6","mean","require$$7","median","require$$8","mode","require$$9","skewness","require$$10","stdev","require$$11","variance","require$$12","cdf","require$$13","logcdf","require$$14","logpdf","require$$15","mgf","require$$16","pdf","require$$17","quantile","require$$18","format","require$$19","Triangular","a","b","c","this","arguments","length","TypeError","RangeError","configurable","enumerable","get","set","value","prototype","x","t","p","lib"],"mappings":"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"}